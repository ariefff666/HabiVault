// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// FlutterSecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    223,
    224,
    110,
    241,
    11,
    195,
    51,
    35,
    91,
    127,
    213,
    250,
    120,
    114,
    214,
    223,
    246,
    236,
    235,
    164,
    190,
    171,
    234,
    173,
    155,
    99,
    78,
    143,
    180,
    96,
    65,
    189,
    198,
    207,
    240,
    203,
    255,
    247,
    7,
    224,
    120,
    138,
    99,
    181,
    215,
    31,
    62,
    225,
    242,
    34,
    20,
    60,
    169,
    84,
    183,
    186,
    34,
    21,
    211,
    3,
    36,
    7,
    184,
    138,
    81,
    194,
    100,
    195,
    119,
    17,
    43,
    128,
    187,
    52,
    115,
    214,
    255,
    216,
    226,
    173,
    109,
    57,
    9,
    236,
    202,
    101,
    158,
    189,
    237,
    100,
    194,
    62,
    96,
    40,
    70,
    59,
    6,
    104,
    216,
    128,
    109,
    240,
    52,
    227,
    166,
    48,
    233,
    233,
    183,
    85,
    144,
    173,
    115,
    67,
    100,
    99,
    128,
    224,
    239,
    188,
    175,
    128,
    206,
    50,
    165,
    239,
    188,
    97,
    225,
    181,
    213,
    214,
    91,
    120,
    17,
    221,
    8,
    32,
    12,
    253,
    104,
    152,
    175,
    88,
    85,
    26,
    170,
    234,
    150,
    6,
    126,
    126,
    169,
    189,
    39,
    57,
    91,
    27,
    223,
    242,
    12,
    14,
    172,
    138,
    0,
    246,
    152,
    222,
    142,
    198,
    183,
    220,
    219,
    38,
    208,
    129,
    17,
    170,
    243,
    178,
    56,
    137,
    6,
    214,
    248,
    248,
    207,
    253,
    92,
    7,
    121,
    222,
    232,
    24,
    21,
    212,
    21,
    100,
    99,
    104,
    135,
    156,
    43,
    49,
    159,
    16,
    189,
    228,
    196,
    220,
    197,
    5,
    163,
    61,
    245,
    56,
    245,
    61,
    194,
    254,
    46,
    18,
    17,
    194,
    236,
    183,
    246,
    161,
    166,
    17,
    125,
    124,
    98,
    107,
    90,
    176,
    78,
    178,
    37,
    62,
    239,
    157,
    86,
    134,
    121,
    176,
    224,
    106,
    125,
    0,
    228,
    229,
    119,
    183,
    146,
    146,
    68,
    241,
    23,
    232,
    174,
    214,
    9,
    76,
    154,
    105,
    254,
    247,
    221,
    41,
    138,
    50,
    232,
    83,
    25,
    2,
    146,
    17,
    121,
    244,
    173,
    102,
    242,
    51,
    52,
    186,
    43,
    147,
    121,
    67,
    88,
    197,
    175,
    160,
    207,
    42,
    196,
    72,
    125,
    170,
    170,
    112,
    73,
    41,
    38,
    105,
    161,
    215,
    87,
    195,
    124,
    130,
    37,
    81,
    36,
    164,
    145,
    137,
    142,
    180,
    40,
    17,
    220,
    226,
    161,
    150,
    66,
    86,
    65,
    149,
    174,
    52,
    159,
    245,
    106,
    72,
    215,
    114,
    84,
    146,
    247,
    93,
    21,
    187,
    160,
    164,
    160,
    98,
    109,
    66,
    74,
    22,
    180,
    110,
    45,
    214,
    137,
    162,
    86,
    49,
    119,
    179,
    240,
    85,
    185,
    108,
    71,
    238,
    174,
    105,
    26,
    254,
    99,
    86,
    14,
    223,
    115,
    171,
    29,
    98,
    64,
    4,
    49,
    82,
    108,
    177,
    28,
    176,
    86,
    221,
    186,
    175,
    106,
    107,
    217,
    155,
    131,
    29,
    153,
    54,
    201,
    166,
    203,
    2,
    109,
    80,
    170,
    253,
    112,
    54,
    61,
    72,
    245,
    59,
    103,
    22
  ]);
  @override
  String get firebaseAndroidApiKey => _get('FIREBASE_ANDROID_API_KEY');

  @override
  String get firebaseAndroidAppId => _get('FIREBASE_ANDROID_APP_ID');

  @override
  String get firebaseAndroidMessagingSenderId =>
      _get('FIREBASE_ANDROID_MESSAGING_SENDER_ID');

  @override
  String get firebaseAndroidProjectId => _get('FIREBASE_ANDROID_PROJECT_ID');

  @override
  String get firebaseAndroidStorageBucket =>
      _get('FIREBASE_ANDROID_STORAGE_BUCKET');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncrypter.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncrypter.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return parseValue(decryptedValue);
  }
}
