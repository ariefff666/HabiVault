// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// FlutterSecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    43,
    227,
    175,
    118,
    210,
    143,
    150,
    141,
    190,
    192,
    126,
    20,
    82,
    159,
    211,
    112,
    153,
    144,
    153,
    42,
    173,
    127,
    162,
    126,
    150,
    48,
    70,
    113,
    48,
    10,
    4,
    2,
    168,
    160,
    45,
    207,
    216,
    111,
    19,
    125,
    105,
    4,
    32,
    180,
    192,
    230,
    115,
    255,
    160,
    50,
    166,
    93,
    34,
    171,
    220,
    8,
    113,
    140,
    208,
    240,
    44,
    129,
    218,
    146,
    32,
    69,
    47,
    160,
    38,
    231,
    231,
    132,
    187,
    201,
    123,
    47,
    163,
    186,
    165,
    49,
    152,
    146,
    14,
    209,
    7,
    126,
    126,
    115,
    85,
    107,
    192,
    65,
    224,
    108,
    212,
    207,
    187,
    18,
    10,
    168,
    18,
    36,
    248,
    179,
    19,
    134,
    95,
    49,
    126,
    7,
    143,
    16,
    217,
    122,
    27,
    241,
    131,
    208,
    45,
    128,
    95,
    176,
    152,
    52,
    86,
    90,
    45,
    66,
    197,
    213,
    63,
    117,
    5,
    219,
    169,
    198,
    46,
    39,
    94,
    168,
    254,
    220,
    250,
    195,
    79,
    124,
    64,
    10,
    230,
    187,
    122,
    51,
    210,
    169,
    9,
    14,
    53,
    53,
    42,
    37,
    191,
    40,
    158,
    4,
    82,
    53,
    60,
    200,
    194,
    100,
    219,
    207,
    73,
    125,
    155,
    129,
    178,
    54,
    160,
    250,
    126,
    231,
    229,
    4,
    123,
    84,
    236,
    144,
    125,
    152,
    240,
    129,
    144,
    220,
    49,
    211,
    125,
    223,
    161,
    119,
    117,
    66,
    231,
    213,
    140,
    127,
    151,
    132,
    73,
    34,
    59,
    231,
    237,
    151,
    199,
    67,
    39,
    179,
    191,
    127,
    24,
    10,
    83,
    74,
    33,
    120,
    145,
    115,
    48,
    47,
    47,
    234,
    51,
    241,
    250,
    130,
    102,
    195,
    33,
    188,
    34,
    92,
    233,
    155,
    255,
    120,
    230,
    123,
    18,
    240,
    175,
    17,
    199,
    146,
    178,
    18,
    5,
    94,
    27,
    45,
    99,
    57,
    164,
    86,
    177,
    201,
    16,
    98,
    145,
    226,
    239,
    110,
    91,
    78,
    93,
    185,
    122,
    124,
    221,
    164,
    128,
    121,
    189,
    48,
    178,
    0,
    186,
    215,
    140,
    224,
    171,
    185,
    216,
    70,
    188,
    156,
    250,
    141,
    218,
    124,
    1,
    234,
    243,
    104,
    181,
    71,
    196,
    120,
    106,
    131,
    37,
    232,
    134,
    189,
    216,
    49,
    195,
    118,
    154,
    91,
    191,
    232,
    110,
    233,
    99,
    168,
    71,
    154,
    253,
    113,
    92,
    125,
    181,
    188,
    202,
    94,
    4,
    212,
    96,
    222,
    142,
    124,
    113,
    73,
    14,
    75,
    212,
    53,
    142,
    175,
    129,
    75,
    58,
    57,
    51,
    9,
    242,
    17,
    241,
    159,
    225,
    204,
    2,
    101,
    217,
    34,
    150,
    139,
    11,
    67,
    62,
    145,
    153,
    122,
    249,
    169,
    74,
    120,
    60,
    110,
    56,
    114,
    29,
    230,
    98,
    125,
    71,
    41,
    237,
    153,
    218,
    26,
    96,
    20,
    62,
    122,
    121,
    47,
    15,
    49,
    41,
    102,
    147,
    20,
    114,
    216,
    39,
    104,
    37,
    70,
    33,
    89,
    211,
    198,
    225,
    8,
    248,
    147,
    186,
    125,
    1,
    176,
    20,
    72,
    167,
    203,
    86,
    160,
    146,
    99,
    43,
    146,
    94,
    78,
    58,
    30,
    73,
    51,
    142,
    179,
    155,
    163,
    255,
    240,
    118,
    108,
    144,
    5,
    72,
    73,
    16,
    137,
    47,
    233,
    245,
    248,
    3,
    17,
    82,
    59,
    90,
    28,
    209,
    46,
    77,
    172,
    40,
    110,
    178,
    27,
    111,
    110,
    247,
    19,
    183,
    128,
    21,
    253,
    154,
    119,
    46,
    154,
    206,
    232,
    254,
    233,
    49,
    112,
    213,
    250,
    238,
    226,
    223,
    240,
    174,
    38,
    121,
    152,
    86,
    249,
    117,
    131,
    128,
    109,
    203,
    136,
    168,
    35,
    184,
    145,
    14,
    162,
    245,
    56,
    225,
    130,
    244,
    234,
    20,
    171,
    99,
    215,
    73,
    118,
    217,
    51,
    84,
    28,
    152,
    246,
    241,
    100,
    177,
    39,
    213,
    80,
    203,
    177,
    245,
    57,
    129,
    173,
    176,
    110,
    101,
    174,
    237,
    92,
    168,
    192,
    144,
    210,
    34,
    202,
    33,
    16,
    87,
    226,
    96,
    101,
    46,
    148,
    151,
    163,
    160,
    133,
    172,
    243,
    250,
    16,
    207,
    0,
    174,
    227,
    130,
    18,
    167,
    179,
    222,
    123,
    14,
    4,
    237,
    69,
    140,
    16,
    212,
    233,
    177,
    23,
    11,
    174,
    62,
    116,
    70,
    150,
    199,
    198,
    36,
    49,
    165,
    75,
    160,
    189,
    189,
    125,
    71,
    45,
    204,
    125,
    108,
    25,
    108,
    183,
    119,
    85,
    41,
    45,
    254,
    190,
    226,
    43,
    159,
    251,
    150,
    9,
    172,
    87,
    148,
    155,
    65,
    183,
    249,
    48,
    103,
    133,
    150,
    4,
    195,
    220,
    99,
    181,
    27,
    36,
    95,
    200,
    121,
    36,
    33,
    209,
    34,
    51,
    40,
    142,
    207,
    115,
    201,
    143,
    103,
    78,
    198,
    204,
    183,
    56,
    182,
    58,
    213,
    172,
    40,
    30,
    155,
    23
  ]);
  @override
  String get firebaseAndroidApiKey => _get('FIREBASE_ANDROID_API_KEY');

  @override
  String get firebaseAndroidAppId => _get('FIREBASE_ANDROID_APP_ID');

  @override
  String get firebaseAndroidMessagingSenderId =>
      _get('FIREBASE_ANDROID_MESSAGING_SENDER_ID');

  @override
  String get firebaseAndroidProjectId => _get('FIREBASE_ANDROID_PROJECT_ID');

  @override
  String get firebaseAndroidStorageBucket =>
      _get('FIREBASE_ANDROID_STORAGE_BUCKET');

  @override
  String get cloudinaryCloudName => _get('CLOUDINARY_CLOUD_NAME');

  @override
  String get cloudinaryApiKey => _get('CLOUDINARY_API_KEY');

  @override
  String get cloudinaryApiSecretKey => _get('CLOUDINARY_API_SECRET_KEY');

  @override
  String get cloudinaryUploadPreset => _get('CLOUDINARY_UPLOAD_PRESET');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncrypter.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncrypter.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return parseValue(decryptedValue);
  }
}
